# Importovanie potrebn√Ωch kni≈æn√≠c
from flask import Flask, render_template, request, redirect, url_for, jsonify  # Flask framework a jeho komponenty
import serial             # Komunik√°cia cez s√©riov√Ω port (napr. s Arduinom)
import threading          # Pr√°ca s vl√°knami (paraleln√© ƒç√≠tanie zo senzora)
import time               # ƒåasov√© funkcie (napr. pauzy)
import sqlite3            # Pr√°ca s SQLite datab√°zou
from datetime import datetime  # Pr√°ca s d√°tumom a ƒçasom
import csv                # Pr√°ca s CSV s√∫bormi
import os                 # Pr√°ca so s√∫borov√Ωm syst√©mom

# Inicializ√°cia Flask aplik√°cie
app = Flask(__name__)

# Glob√°lne premenn√©
ser = None                        # Objekt s√©riov√©ho portu
reading_thread = None            # Vl√°kno pre ƒç√≠tanie d√°t zo senzora
reading_active = False           # Oznaƒçuje, ƒçi sa m√° ƒç√≠ta≈• zo senzora
monitoring_params = {}           # Nastaven√© parametre (napr. prah, interval)
monitoring_started = False       # Oznaƒçuje, ƒçi be≈æ√≠ monitorovanie
monitored_data = []              # Pole s monitorovan√Ωmi d√°tami

# Kon≈°tanty pre veƒækos≈• a n√°zvy logovac√≠ch s√∫borov
MAX_DATA_LENGTH = 100
MEASUREMENT_FILE = "measurements.csv"
PARAMETER_FILE = "parameters.csv"

# Inicializ√°cia SQLite datab√°zy (vytvorenie tabuliek ak neexistuj√∫)
def init_db():
    conn = sqlite3.connect('monitoring.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS measurements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            temperature REAL,
            humidity REAL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parameters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            threshold REAL,
            interval REAL
        )
    ''')
    conn.commit()
    conn.close()

# Vytvorenie CSV s√∫borov s hlaviƒçkami, ak e≈°te neexistuj√∫
def init_log_files():
    if not os.path.exists(MEASUREMENT_FILE):
        with open(MEASUREMENT_FILE, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "temperature", "humidity"])
    if not os.path.exists(PARAMETER_FILE):
        with open(PARAMETER_FILE, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "threshold", "interval"])

# Zap√≠sanie merania do CSV s√∫boru
def log_measurement_to_file(temp, humidity):
    try:
        with open(MEASUREMENT_FILE, 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([datetime.now().isoformat(), temp, humidity])
            f.flush()  # Okam≈æit√© zap√≠sanie
        print(f"‚úÖ Written to CSV: Temp={temp}, Hum={humidity}")
    except Exception as e:
        print(f"CSV Write Error: {e}")

# Zap√≠sanie parametrov do CSV s√∫boru
def log_parameters_to_file(threshold, interval):
    with open(PARAMETER_FILE, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().isoformat(), threshold, interval])

# Zap√≠sanie merania do datab√°zy aj do CSV
def insert_measurement(temp, humidity):
    conn = sqlite3.connect('monitoring.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO measurements (timestamp, temperature, humidity) VALUES (?, ?, ?)",
                   (datetime.now().isoformat(), temp, humidity))
    conn.commit()
    conn.close()
    log_measurement_to_file(temp, humidity)
    print(f"‚úÖ Inserted into DB and CSV: {temp}¬∞C / {humidity}%")

# Zap√≠sanie nastaven√Ωch parametrov do datab√°zy aj do CSV
def insert_parameters(threshold, interval):
    conn = sqlite3.connect('monitoring.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO parameters (timestamp, threshold, interval) VALUES (?, ?, ?)",
                   (datetime.now().isoformat(), threshold, interval))
    conn.commit()
    conn.close()
    log_parameters_to_file(threshold, interval)

# Vl√°kno, ktor√© ƒç√≠ta zo s√©riov√©ho portu d√°ta zo senzora
def read_serial():
    global ser, reading_active, monitoring_started, monitored_data
    last_temp = None
    last_hum = None

    while reading_active and ser:  # Pokiaƒæ ƒç√≠tanie prebieha
        try:
            raw_data = ser.readline().decode(errors='ignore').strip()
            print(f"üì• Received: {raw_data}")

            if monitoring_started:
                # Spracovanie teploty
                if "Temperature:" in raw_data:
                    try:
                        temp_str = raw_data.split(":")[1].strip().replace("¬∞C", "")
                        last_temp = float(temp_str)
                        print(f"üå°Ô∏è Parsed temperature: {last_temp}")
                    except ValueError:
                        print("‚ö†Ô∏è Failed to parse temperature.")

                # Spracovanie vlhkosti
                elif "Humidity:" in raw_data:
                    try:
                        hum_str = raw_data.split(":")[1].strip().replace("%", "")
                        last_hum = float(hum_str)
                        print(f"üíß Parsed humidity: {last_hum}")
                    except ValueError:
                        print("‚ö†Ô∏è Failed to parse humidity.")

                # Ak s√∫ obe hodnoty dostupn√©
                if last_temp is not None and last_hum is not None:
                    print("üü¢ Both values received ‚Äî writing to DB & CSV")
                    monitored_data.append((last_temp, last_hum))
                    insert_measurement(last_temp, last_hum)

                    # Udr≈æiavame len posledn√Ωch MAX_DATA_LENGTH z√°znamov
                    if len(monitored_data) > MAX_DATA_LENGTH:
                        monitored_data.pop(0)

                    # Kontrola prekroƒçenia prahovej hodnoty
                    if monitoring_params.get("threshold") and last_temp > monitoring_params["threshold"]:
                        print(f"üö® Threshold exceeded: {last_temp}¬∞C > {monitoring_params['threshold']}¬∞C")

                    last_temp = None
                    last_hum = None

        except Exception as e:
            print(f"Error reading serial: {e}")

        time.sleep(monitoring_params.get("interval", 1))  # Pauza medzi meraniami

# Flask routy pre web aplik√°ciu

@app.route('/')
def index():
    # Naƒç√≠tanie hlavnej str√°nky
    return render_template('index.html', params=monitoring_params, monitoring=monitoring_started, data=monitored_data)

@app.route('/data')
def get_data():
    # Vracia v≈°etky d√°ta ako JSON
    return jsonify(monitored_data)

@app.route('/latest')
def get_latest_value():
    # Vracia posledn√∫ nameran√∫ hodnotu ako JSON
    if monitored_data:
        temp, hum = monitored_data[-1]
        return jsonify({"temperature": temp, "humidity": hum})
    else:
        return jsonify({"temperature": None, "humidity": None})

@app.route('/archive')
def archive():
    # Naƒç√≠ta posledn√Ωch 100 z√°znamov z datab√°zy
    conn = sqlite3.connect('monitoring.db')
    cursor = conn.cursor()
    cursor.execute("SELECT timestamp, temperature, humidity FROM measurements ORDER BY timestamp DESC LIMIT 100")
    rows = cursor.fetchall()
    conn.close()
    return jsonify(rows)

@app.route('/archive_file')
def archive_file():
    # Naƒç√≠ta posledn√Ωch 100 z√°znamov z CSV s√∫boru
    data = []
    try:
        with open(MEASUREMENT_FILE, 'r') as f:
            reader = csv.reader(f)
            next(reader)  # preskoƒç hlaviƒçku
            data = list(reader)[-100:]
    except Exception as e:
        print(f"Error reading CSV file: {e}")
    return jsonify(data)

@app.route('/parameters')
def parameters():
    # Z√≠skaj posledn√Ωch 50 z√°znamov parametrov z datab√°zy
    conn = sqlite3.connect('monitoring.db')
    cursor = conn.cursor()
    cursor.execute("SELECT timestamp, threshold, interval FROM parameters ORDER BY timestamp DESC LIMIT 50")
    rows = cursor.fetchall()
    conn.close()
    return jsonify(rows)

@app.route('/parameters_file')
def parameters_file():
    # Z√≠skaj posledn√Ωch 50 z√°znamov z CSV s√∫boru
    data = []
    try:
        with open(PARAMETER_FILE, 'r') as f:
            reader = csv.reader(f)
            next(reader)
            data = list(reader)[-50:]
    except Exception as e:
        print(f"Error reading parameters file: {e}")
    return jsonify(data)

@app.route('/open', methods=['POST'])
def open_connection():
    # Otvorenie s√©riov√©ho portu a spustenie vl√°kna na ƒç√≠tanie d√°t
    global ser, reading_thread, reading_active
    try:
        ser = serial.Serial('/dev/ttyS0', 9600, timeout=1)
        reading_active = True
        reading_thread = threading.Thread(target=read_serial, daemon=True)
        reading_thread.start()
        print("üîå Serial connection opened.")
    except Exception as e:
        print(f"Failed to open serial connection: {e}")
    return redirect(url_for('index'))

@app.route('/set_parameters', methods=['POST'])
def set_parameters():
    # Nastavenie nov√Ωch parametrov (prahov√° teplota, interval)
    global monitoring_params
    threshold = request.form.get('threshold')
    interval = request.form.get('interval')
    monitoring_params['threshold'] = float(threshold) if threshold else None
    monitoring_params['interval'] = float(interval) if interval else 1.0
    insert_parameters(monitoring_params['threshold'], monitoring_params['interval'])
    return redirect(url_for('index'))

@app.route('/start', methods=['POST'])
def start_monitoring():
    # Spustenie monitorovania
    global monitoring_started
    monitoring_started = True
    print("‚ñ∂Ô∏è Monitoring started.")
    return redirect(url_for('index'))

@app.route('/stop', methods=['POST'])
def stop_monitoring():
    # Zastavenie monitorovania
    global monitoring_started
    monitoring_started = False
    print("‚èπÔ∏è Monitoring stopped.")
    return redirect(url_for('index'))

@app.route('/close', methods=['POST'])
def close_connection():
    # Zatvorenie s√©riov√©ho portu a resetovanie v≈°etk√Ωch √∫dajov
    global ser, reading_active, monitoring_started, monitored_data, monitoring_params
    monitoring_started = False
    reading_active = False
    monitored_data.clear()
    monitoring_params.clear()
    if ser and ser.is_open:
        ser.close()
        print("‚ùå Serial connection closed.")
    ser = None
    return redirect(url_for('index'))

# Spustenie aplik√°cie
if __name__ == '__main__':
    init_db()            # Inicializuj datab√°zu
    init_log_files()     # Inicializuj CSV s√∫bory
    app.run(host='0.0.0.0', port=5000)  # Spusti Flask server
